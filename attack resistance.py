# -*- coding: utf-8 -*-
"""Untitled48.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yZID-8APAEyT-bMtlQidGz-Wc44osPlw
"""

# modeling_attack_test.py
# Evaluates resistance to ML modeling attacks on PUF CRPs
# pip install pandas numpy scikit-learn

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load dataset
df = pd.read_csv("/content/data 1.csv")

# Convert challenge to binary vector (16 bits)
def hex_to_bin(hx):
    try:
        val = int(str(hx).replace('0x',''), 16)
        return np.array(list(map(int, format(val, '016b'))))
    except:
        return np.zeros(16, dtype=int)

X = np.vstack(df['challenge'].apply(hex_to_bin).values)
# Convert spike16 to response bit (you can use majresp or rx_hex if available)
y = np.array(df['spike16'] % 2, dtype=int)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression
lr = LogisticRegression(max_iter=500)
lr.fit(X_train, y_train)
lr_acc = accuracy_score(y_test, lr.predict(X_test))

# Support Vector Machine
svm = SVC(kernel='rbf')
svm.fit(X_train, y_train)
svm_acc = accuracy_score(y_test, svm.predict(X_test))

# Neural Network
mlp = MLPClassifier(hidden_layer_sizes=(32, 16), max_iter=500)
mlp.fit(X_train, y_train)
mlp_acc = accuracy_score(y_test, mlp.predict(X_test))

print(f"Logistic Regression Accuracy: {lr_acc:.3f}")
print(f"SVM Accuracy: {svm_acc:.3f}")
print(f"Neural Network Accuracy: {mlp_acc:.3f}")

# plot_modeling_attack_results.py
# Visualizes ML modeling resistance results

import matplotlib.pyplot as plt

# Your measured accuracies
models = ['Logistic Regression', 'SVM', 'Neural Network']
accuracies = [0.479, 0.492, 0.504]

# Ideal "random guessing" line (50%)
random_line = 0.5

# Plot
plt.figure(figsize=(6,4))
bars = plt.bar(models, accuracies, color=['#4C72B0','#55A868','#C44E52'], edgecolor='black')

# Random baseline
plt.axhline(random_line, color='gray', linestyle='--', linewidth=1.2, label='Random Guess (0.5)')

# Annotate values
for bar, acc in zip(bars, accuracies):
    plt.text(bar.get_x() + bar.get_width()/2, acc + 0.005, f"{acc*100:.1f}%",
             ha='center', va='bottom', fontsize=10, fontweight='bold')

plt.ylim(0.45, 0.55)
plt.ylabel('Prediction Accuracy')
plt.title('Modeling Attack Resistance of Bio–SNN–PUF')
plt.legend()
plt.tight_layout()
plt.show()