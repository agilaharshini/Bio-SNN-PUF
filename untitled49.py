# -*- coding: utf-8 -*-
"""Untitled49.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ahhzgKkWg9f1oitRykTImHhbpHZsK4jK
"""

# plot_puf_ones_per_key.py
# Plot summed number of '1' bits per challenge (like the example figure)
#
# Usage:
#   python plot_puf_ones_per_key.py
#
# Requirements:
#   pip install pandas numpy matplotlib

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

DATA_PATH = "/content/data 1.csv"   # update path if needed
N_KEYS = 500               # plot first N unique challenges (change if you want more/less)

def ones_in_16bit(val):
    """Count number of '1' bits in the 16-bit representation of an integer value."""
    try:
        v = int(val)
    except:
        v = 0
    v &= 0xFFFF
    return bin(v).count("1")

def main():
    if not os.path.exists(DATA_PATH):
        raise FileNotFoundError(f"CSV not found: {DATA_PATH}")
    df = pd.read_csv(DATA_PATH)

    # Check required columns
    if 'challenge' not in df.columns or 'spike16' not in df.columns:
        raise ValueError("CSV must contain 'challenge' and 'spike16' columns.")

    # Compute ones in spike16 for each row
    df['ones_count'] = df['spike16'].fillna(0).astype(int).apply(ones_in_16bit)

    # Build an ordered list of unique challenges in the order they first appear
    ordered_unique = []
    seen = set()
    for c in df['challenge'].astype(str):
        if c not in seen:
            seen.add(c)
            ordered_unique.append(c)

    # Select first N_KEYS unique challenges (or all if fewer)
    selected_challenges = ordered_unique[:min(N_KEYS, len(ordered_unique))]

    # For each selected challenge compute the sum of ones_count over repeats
    total_ones_per_key = []
    for c in selected_challenges:
        rows = df[df['challenge'].astype(str) == c]
        total_ones = rows['ones_count'].sum()
        total_ones_per_key.append(total_ones)

    x = np.arange(1, len(total_ones_per_key) + 1)

    # Plot
    plt.figure(figsize=(6,4))
    plt.plot(x, total_ones_per_key, color='tab:blue', linewidth=0.9)
    plt.xlabel('Keys')
    plt.ylabel('No. of 1-bits (summed over repeats)')
    plt.title('Randomness of PUF Keys')
    # choose y-limits with padding
    y_min = max(0, min(total_ones_per_key) - 5)
    y_max = max(total_ones_per_key) + 5
    plt.ylim(y_min, y_max)
    plt.grid(alpha=0.3)
    plt.tight_layout()

    out_png = "puf_ones_count_plot.png"
    plt.savefig(out_png, dpi=200)
    print(f"Saved plot to {out_png}. Keys plotted: {len(total_ones_per_key)}")
    plt.show()

if __name__ == "__main__":
    main()