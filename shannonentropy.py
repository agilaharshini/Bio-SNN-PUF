# -*- coding: utf-8 -*-
"""shannonentropy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rnhWRkOLQ9_vq7mEI2q9aB2MawI0O-cR
"""

# plot_puf_metrics.py
# Reproduces Shannon-entropy-per-bit and inter-response Hamming distance histogram
# Usage: python plot_puf_metrics.py
#
# Requirements:
#   pip install pandas numpy matplotlib scipy

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import entropy
import argparse
import os

# ---------- Config ----------
DATA_PATH = "/content/data 1.csv"   # change if your file has a different name/path
SAMPLE_FOR_HD = 500        # number of responses sampled to compute pairwise HD (keeps runtime reasonable)
RANDOM_SEED = 42
# ----------------------------

def hex_to_int16(hexstr):
    """Convert hexlike string (with or without 0x) to 16-bit integer (0..65535)."""
    if pd.isna(hexstr):
        return 0
    s = str(hexstr).strip()
    if s.startswith("0x") or s.startswith("0X"):
        s = s[2:]
    try:
        val = int(s, 16)
    except ValueError:
        # fallback: try numeric parse
        try:
            val = int(float(s))
        except Exception:
            val = 0
    return val & 0xFFFF

def int_to_bitarray16(x):
    """Return numpy array of 16 bits (MSB at index 0)."""
    return np.array(list(map(int, format(int(x) & 0xFFFF, "016b"))), dtype=np.uint8)

def compute_bit_entropies(response_bits):
    """
    response_bits : numpy array shape (N, 16) with 0/1 values
    returns: array of length 16 with Shannon entropy per bit (in nats)
    """
    N = response_bits.shape[0]
    ent = []
    for i in range(response_bits.shape[1]):
        counts = np.bincount(response_bits[:, i], minlength=2)
        probs = counts / counts.sum()
        # scipy.stats.entropy uses natural log (nats) by default
        ent.append(entropy(probs, base=None))
    return np.array(ent)

def compute_normalized_inter_hd(response_bits, sample_size=SAMPLE_FOR_HD, seed=RANDOM_SEED):
    """
    Sample `sample_size` responses and compute all pairwise Hamming distances,
    returning the normalized HDs (in [0,1]).
    """
    np.random.seed(seed)
    N = response_bits.shape[0]
    if N <= sample_size:
        sampled = response_bits
    else:
        idx = np.random.choice(N, sample_size, replace=False)
        sampled = response_bits[idx]
    # compute pairwise HDs
    m = sampled.shape[0]
    # use vectorized approach
    # expanded arrays: (m, m, 16) - but to save memory compute upper triangle
    hds = []
    for i in range(m):
        diffs = sampled[i] != sampled[i+1:m]
        # sum across bit axis -> yields HDs with rows i vs i+1..m-1
        row_hd = diffs.sum(axis=1)
        hds.extend(row_hd.tolist())
    hds = np.array(hds, dtype=float)
    # normalize by bitwidth
    hds_norm = hds / response_bits.shape[1]
    return hds_norm

def main(path):
    if not os.path.exists(path):
        raise FileNotFoundError(f"File not found: {path}")
    df = pd.read_csv(path)
    # Choose which column to use as response. In the dataset you shared earlier, 'spike16' was used.
    if 'spike16' not in df.columns:
        raise ValueError("Expected column 'spike16' in CSV.")
    # convert spike16 -> 16-bit bit arrays
    spike_vals = df['spike16'].fillna(0).astype(int).values
    responses_bits = np.vstack([int_to_bitarray16(v) for v in spike_vals])

    # Shannon entropy per bit (in nats)
    bit_entropies = compute_bit_entropies(responses_bits)
    avg_shannon_entropy = bit_entropies.mean()

    # Inter-response Hamming distances (normalized)
    hds_norm = compute_normalized_inter_hd(responses_bits, sample_size=SAMPLE_FOR_HD)

    avg_hd = np.mean(hds_norm)

    # --- plotting ---
    plt.figure(figsize=(12,4))
    plt.subplot(1,2,1)
    plt.bar(range(16), bit_entropies, color='tab:orange', edgecolor='k')
    plt.title(f'Shannon Entropy per Bit (Avg={avg_shannon_entropy:.6f} nats)')
    plt.xlabel('Bit Position (MSB=0)')
    plt.ylabel('Entropy (nats)')
    plt.ylim(0, 1.0)

    plt.subplot(1,2,2)
    plt.hist(hds_norm, bins=20, color='tab:orange', edgecolor='k')
    plt.title(f'Normalized Inter-Response Hamming Distance (Mean={avg_hd:.6f})')
    plt.xlabel('Normalized Hamming Distance')
    plt.ylabel('Frequency')

    plt.tight_layout()
    plt.show()

    # Print summary (also returnable)
    print(f"Average per-bit Shannon entropy (nats): {avg_shannon_entropy:.6f}")
    print(f"Average normalized inter-response Hamming distance: {avg_hd:.6f}")

main(DATA_PATH)